true_positives = sum(medias$PHENO == 1 & medias$Means == 1)
false_negatives = sum(medias$PHENO == 1 & medias$Means == 2)
false_positives = sum(medias$PHENO == 2 & medias$Means == 1)
true_negatives = sum(medias$PHENO == 2 & medias$Means == 2)
accuracyXGBDART = (true_negatives + true_positives)/dim(medias)
accuracyXGBDART
h = readRDS("~/MetaLearning/Pruebas/PruebaGorda/xgbLinear/handlerMeta-genotype-FALSE.rds")
pruebaSet = h$metaSet
pheno = as.numeric(pruebaSet$PHENO)
pruebaSet$Pred1 = as.numeric(pruebaSet$Pred1)
pruebaSet$Pred2 = as.numeric(pruebaSet$Pred2)
pruebaSet$Pred3 = as.numeric(pruebaSet$Pred3)
pruebaSet$Pred4 = as.numeric(pruebaSet$Pred4)
pruebaSet$Pred5 = as.numeric(pruebaSet$Pred5)
pruebaSet$PHENO = NULL
pruebaSet$ID = NULL
medias = data.frame(PHENO = pheno, Means = rowMeans(pruebaSet[,]))
medias$Means = round(medias$Means)
true_positives = sum(medias$PHENO == 1 & medias$Means == 1)
false_negatives = sum(medias$PHENO == 1 & medias$Means == 2)
false_positives = sum(medias$PHENO == 2 & medias$Means == 1)
true_negatives = sum(medias$PHENO == 2 & medias$Means == 2)
accuracyXGBLINEAR = (true_negatives + true_positives)/dim(medias)
accuracyXGBLINEAR
help(data.table)
help("data.table")
source('~/gmlexmetaPC.R', echo=TRUE)
rm(list=ls())
source('~/gmlexmetaPC.R', echo=TRUE)
View(handlerRF)
dataTest <- fread(handlerMLdata$test1mldata)
rm(list=ls())
library(caret)
library(plotROC)
library(magrittr)
library(data.table)
source("~/io_dev.R")
source("~/funcionMML.R")
models = NULL
models[["ALL"]] = c("dnn","lda","glm", "nnet","C5.0","glmnet","nb", "xgbLinear", "earth", "svmRadial", "lasso",
"ridge", "evtree", "xgbTree", "rf", "bayesglm", "xgbDART")
models[["FAST"]] =  c("xgbTree", "rf")
models[["FURIOUS"]] = c("glm", "glmnet", "xgbLinear", "earth", "svmRadial", "lasso")
models[["BOOSTED"]] = c("xgbLinear", "xgbTree", "xgbDART")
handlerTrain <- readRDS("~/MetaLearning/Pruebas/PruebaGorda/allModels-rf.rds")
handlerMLdata <- readRDS("~/MetaLearning/Pruebas/PruebaGorda/mldatahandler.rds")
handlerMLdata$test1mldata = "~/MetaLearning/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8test.1-p-MyPhenotype1test-c-COVS_test1-a-NA.dataForML"
handlerMLdata$train1mldata = "~/MetaLearning/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8train.1-p-MyPhenotype1train-c-COVS_train1-a-NA.dataForML"
includeGeno = F
gridSearch = 30
imputeMissingData = "median"
trainSpeed = "FAST"
workPath = "/home/rafa/MetaLearning/Pruebas/"
handlerMeta <- NULL
prefix = paste0(handlerTrain[[1]]$bestAlgorithm,"-genotype-", includeGeno)
# dataTest <- NULL
# #we keep the test part of each .dataForML generated in the previous steps, as this
# #data has not been used for training, and we join everything into one single dataframe
# for (i in 1:length(handlerTrain)){
#   testModeli <- fread(handlerTrain[[i]]$testmldata)
#   dataTest <- rbind(dataTest, testModeli, fill = TRUE)
# }
checkVariantNames(handlerMLdata$train1mldata,handlerMLdata$test1mldata)
dataTest <- fread(handlerMLdata$test1mldata)
#same preprocess applied to the training
dataTest$PHENO[dataTest$PHENO == 2] <- "DISEASE"
dataTest$PHENO[dataTest$PHENO == 1] <- "CONTROL"
ID <- dataTest$ID
dataTest[,c("ID") := NULL]
preProcValues <- preProcess(dataTest[,-1], method = c(paste(imputeMissingData,"Impute", sep = ""))) # note here we pick impute method (KNN or median),  we can also exclude near zero variance predictors and correlated predictors
test_processed <- predict(preProcValues, dataTest) # here we make the preprocessed values
#dataframe which will contain the predictions from each model
metaSet = data.frame(ID, test_processed$PHENO)
colnames(metaSet) <- c("ID", "PHENO")
for (i in 1:length(handlerTrain)){
preds <- predict(handlerTrain[[i]]$bestModel, newdata = test_processed)
colName <- paste0("Pred",i)
metaSet[colName] <- preds
}
View(metaSet)
rm(list = ls())
library(caret)
library(plotROC)
library(magrittr)
library(data.table)
source("~/io_dev.R")
source("~/funcionMML.R")
models = NULL
models[["ALL"]] = c("dnn","lda","glm", "nnet","C5.0","glmnet","nb", "xgbLinear", "earth", "svmRadial", "lasso",
"ridge", "evtree", "xgbTree", "rf", "bayesglm", "xgbDART")
models[["FAST"]] =  c("xgbTree", "rf")
models[["FURIOUS"]] = c("glm", "glmnet", "xgbLinear", "earth", "svmRadial", "lasso")
models[["BOOSTED"]] = c("xgbLinear", "xgbTree", "xgbDART")
handlerTrain <- readRDS("~/MetaLearning/Pruebas/PruebaGorda/allModels-rf.rds")
handlerMLdata <- readRDS("~/MetaLearning/Pruebas/PruebaGorda/mldatahandler.rds")
handlerMLdata$test1mldata = "~/MetaLearning/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8test.1-p-MyPhenotype1test-c-COVS_test1-a-NA.dataForML"
handlerMLdata$train1mldata = "~/MetaLearning/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8train.1-p-MyPhenotype1train-c-COVS_train1-a-NA.dataForML"
includeGeno = F
gridSearch = 30
imputeMissingData = "median"
trainSpeed = "FAST"
workPath = "/home/rafa/MetaLearning/Pruebas/"
handlerMeta <- NULL
prefix = paste0(handlerTrain[[1]]$bestAlgorithm,"-genotype-", includeGeno)
# dataTest <- NULL
# #we keep the test part of each .dataForML generated in the previous steps, as this
# #data has not been used for training, and we join everything into one single dataframe
# for (i in 1:length(handlerTrain)){
#   testModeli <- fread(handlerTrain[[i]]$testmldata)
#   dataTest <- rbind(dataTest, testModeli, fill = TRUE)
# }
checkVariantNames(handlerMLdata$train1mldata,handlerMLdata$test1mldata)
dataTest <- fread(handlerMLdata$test1mldata)
#same preprocess applied to the training
dataTest$PHENO[dataTest$PHENO == 2] <- "DISEASE"
dataTest$PHENO[dataTest$PHENO == 1] <- "CONTROL"
ID <- dataTest$ID
dataTest[,c("ID") := NULL]
preProcValues <- preProcess(dataTest[,-1], method = c(paste(imputeMissingData,"Impute", sep = ""))) # note here we pick impute method (KNN or median),  we can also exclude near zero variance predictors and correlated predictors
test_processed <- predict(preProcValues, dataTest) # here we make the preprocessed values
#dataframe which will contain the predictions from each model
metaSet = data.frame(ID, test_processed$PHENO)
colnames(metaSet) <- c("ID", "PHENO")
handlerRF <- readRDS("~/MetaLearning/Pruebas/PruebaGorda/allModels-rf.rds")
handlerDART <- readRDS("~/MetaLearning/Pruebas/PruebaGorda/allModels-xgbDART.rds")
handlerLINEAR <- readRDS("~/MetaLearning/Pruebas/PruebaGorda/allModels-xgbLinear.rds")
handlerTREE <- readRDS("~/MetaLearning/Pruebas/PruebaGorda/allModels-xgbTree.rds")
# PRUEBA CON MODELO DE UNICO HOSPITAL PARA REFUTAR SI DA MEJOR RESULTADO
sumaRF = 0
for (i in 1:5){
predictionsPeor <- predict(handlerRF[[i]]$bestModel, test_processed)
confmarp = confusionMatrix(data = as.factor(predictionsPeor), reference = as.factor(test_processed$PHENO), positive = "DISEASE")
sumaRF = sumaRF + confmarp$overall['Accuracy']
}
mediaRF = sumaRF / 5
sumaTREE = 0
for (i in 1:5){
predictionsPeor <- predict(handlerTREE[[i]]$bestModel, test_processed)
confmarp = confusionMatrix(data = as.factor(predictionsPeor), reference = as.factor(test_processed$PHENO), positive = "DISEASE")
sumaTREE = sumaTREE + confmarp$overall['Accuracy']
}
mediaTREE = sumaTREE / 5
sumaDART = 0
for (i in 1:5){
predictionsPeor <- predict(handlerDART[[i]]$bestModel, test_processed)
confmarp = confusionMatrix(data = as.factor(predictionsPeor), reference = as.factor(test_processed$PHENO), positive = "DISEASE")
sumaDART = sumaDART + confmarp$overall['Accuracy']
}
mediaDART = sumaDART / 5
sumaLINEAR = 0
for (i in 1:5){
predictionsPeor <- predict(handlerLINEAR[[i]]$bestModel, test_processed)
confmarp = confusionMatrix(data = as.factor(predictionsPeor), reference = as.factor(test_processed$PHENO), positive = "DISEASE")
sumaLINEAR = sumaLINEAR + confmarp$overall['Accuracy']
}
mediaLINEAR = sumaLINEAR / 5
for (i in 1:length(handlerTrain)){
preds <- predict(handlerTrain[[i]]$bestModel, newdata = test_processed)
colName <- paste0("Pred",i)
metaSet[colName] <- preds
}
pruebaSet = metaSet
pheno = as.numeric(pruebaSet$PHENO)
pruebaSet$Pred1 = as.numeric(pruebaSet$Pred1)
pruebaSet$Pred2 = as.numeric(pruebaSet$Pred2)
pruebaSet$Pred3 = as.numeric(pruebaSet$Pred3)
pruebaSet$Pred4 = as.numeric(pruebaSet$Pred4)
pruebaSet$Pred5 = as.numeric(pruebaSet$Pred5)
pruebaSet$PHENO = NULL
medias = data.frame(PHENO = pheno, Means = rowMeans(pruebaSet[,]))
medias$Means = round(medias$Means)
true_positives = sum(medias$PHENO == 1 & medias$Means == 1)
false_negatives = sum(medias$PHENO == 1 & medias$Means == 2)
false_positives = sum(medias$PHENO == 2 & medias$Means == 1)
true_negatives = sum(medias$PHENO == 2 & medias$Means == 2)
accuracyRF = (true_negatives + true_positives)/dim(medias)
pruebaSet = metaSet
pheno = as.numeric(pruebaSet$PHENO)
pruebaSet$Pred1 = as.numeric(pruebaSet$Pred1)
pruebaSet$Pred2 = as.numeric(pruebaSet$Pred2)
pruebaSet$Pred3 = as.numeric(pruebaSet$Pred3)
pruebaSet$Pred4 = as.numeric(pruebaSet$Pred4)
pruebaSet$Pred5 = as.numeric(pruebaSet$Pred5)
pruebaSet$PHENO = NULL
pruebaSet$ID = NULL
medias = data.frame(PHENO = pheno, Means = rowMeans(pruebaSet[,]))
medias$Means = round(medias$Means)
true_positives = sum(medias$PHENO == 1 & medias$Means == 1)
false_negatives = sum(medias$PHENO == 1 & medias$Means == 2)
false_positives = sum(medias$PHENO == 2 & medias$Means == 1)
true_negatives = sum(medias$PHENO == 2 & medias$Means == 2)
accuracyRF = (true_negatives + true_positives)/dim(medias)
handlerTrain <- readRDS("~/MetaLearning/Pruebas/PruebaGorda/allModels-xgbTree.rds")
for (i in 1:length(handlerTrain)){
preds <- predict(handlerTrain[[i]]$bestModel, newdata = test_processed)
colName <- paste0("Pred",i)
metaSet[colName] <- preds
}
pruebaSet = metaSet
pheno = as.numeric(pruebaSet$PHENO)
pruebaSet$Pred1 = as.numeric(pruebaSet$Pred1)
pruebaSet$Pred2 = as.numeric(pruebaSet$Pred2)
pruebaSet$Pred3 = as.numeric(pruebaSet$Pred3)
pruebaSet$Pred4 = as.numeric(pruebaSet$Pred4)
pruebaSet$Pred5 = as.numeric(pruebaSet$Pred5)
pruebaSet$PHENO = NULL
pruebaSet$ID = NULL
medias = data.frame(PHENO = pheno, Means = rowMeans(pruebaSet[,]))
medias$Means = round(medias$Means)
true_positives = sum(medias$PHENO == 1 & medias$Means == 1)
false_negatives = sum(medias$PHENO == 1 & medias$Means == 2)
false_positives = sum(medias$PHENO == 2 & medias$Means == 1)
true_negatives = sum(medias$PHENO == 2 & medias$Means == 2)
accuracyTree = (true_negatives + true_positives)/dim(medias)
handlerTrain <- readRDS("~/MetaLearning/Pruebas/PruebaGorda/allModels-xgbDART.rds")
for (i in 1:length(handlerTrain)){
preds <- predict(handlerTrain[[i]]$bestModel, newdata = test_processed)
colName <- paste0("Pred",i)
metaSet[colName] <- preds
}
pruebaSet = metaSet
pheno = as.numeric(pruebaSet$PHENO)
pruebaSet$Pred1 = as.numeric(pruebaSet$Pred1)
pruebaSet$Pred2 = as.numeric(pruebaSet$Pred2)
pruebaSet$Pred3 = as.numeric(pruebaSet$Pred3)
pruebaSet$Pred4 = as.numeric(pruebaSet$Pred4)
pruebaSet$Pred5 = as.numeric(pruebaSet$Pred5)
pruebaSet$PHENO = NULL
pruebaSet$ID = NULL
medias = data.frame(PHENO = pheno, Means = rowMeans(pruebaSet[,]))
medias$Means = round(medias$Means)
true_positives = sum(medias$PHENO == 1 & medias$Means == 1)
false_negatives = sum(medias$PHENO == 1 & medias$Means == 2)
false_positives = sum(medias$PHENO == 2 & medias$Means == 1)
true_negatives = sum(medias$PHENO == 2 & medias$Means == 2)
accuracyDART = (true_negatives + true_positives)/dim(medias)
handlerTrain <- readRDS("~/MetaLearning/Pruebas/PruebaGorda/allModels-xgbLinear.rds")
preds <- predict(handlerTrain[[i]]$bestModel, newdata = test_processed)
for (i in 1:length(handlerTrain)){
preds <- predict(handlerTrain[[i]]$bestModel, newdata = test_processed)
colName <- paste0("Pred",i)
metaSet[colName] <- preds
}
pruebaSet = metaSet
pheno = as.numeric(pruebaSet$PHENO)
pruebaSet$Pred1 = as.numeric(pruebaSet$Pred1)
pruebaSet$Pred2 = as.numeric(pruebaSet$Pred2)
pruebaSet$Pred3 = as.numeric(pruebaSet$Pred3)
pruebaSet$Pred4 = as.numeric(pruebaSet$Pred4)
pruebaSet$Pred5 = as.numeric(pruebaSet$Pred5)
pruebaSet$PHENO = NULL
pruebaSet$ID = NULL
medias = data.frame(PHENO = pheno, Means = rowMeans(pruebaSet[,]))
medias$Means = round(medias$Means)
true_positives = sum(medias$PHENO == 1 & medias$Means == 1)
false_negatives = sum(medias$PHENO == 1 & medias$Means == 2)
false_positives = sum(medias$PHENO == 2 & medias$Means == 1)
true_negatives = sum(medias$PHENO == 2 & medias$Means == 2)
accuracyLINEAR = (true_negatives + true_positives)/dim(medias)
models  <- caretList(handlerTrain[[1]]$bestModel,handlerTrain[[2]]$bestModel,handlerTrain[[3]]$bestModel,handlerTrain[[4]]$bestModel,handlerTrain[[5]]$bestModel)
library(caretEnsemble)
models  <- caretList(handlerTrain[[1]]$bestModel,handlerTrain[[2]]$bestModel,handlerTrain[[3]]$bestModel,handlerTrain[[4]]$bestModel,handlerTrain[[5]]$bestModel)
models  <- list(handlerTrain[[1]]$bestModel,handlerTrain[[2]]$bestModel,handlerTrain[[3]]$bestModel,handlerTrain[[4]]$bestModel,handlerTrain[[5]]$bestModel)
stackControl <- trainControl(
method = "repeatedcv",
number = 10,
repeats = 3,
savePredictions=TRUE,
classProbs = TRUE)
set.seed(1234)
stack.rf <- caretStack(models, method = "rf", metric = "Accuracy", trControl = stackControl)
library(caret)
library(plotROC)
library(magrittr)
library(data.table)
source("~/io_dev.R")
source("~/funcionMML.R")
models = NULL
models[["ALL"]] = c("dnn","lda","glm", "nnet","C5.0","glmnet","nb", "xgbLinear", "earth", "svmRadial", "lasso",
"ridge", "evtree", "xgbTree", "rf", "bayesglm", "xgbDART")
models[["FAST"]] =  c("xgbTree", "rf")
models[["FURIOUS"]] = c("glm", "glmnet", "xgbLinear", "earth", "svmRadial", "lasso")
models[["BOOSTED"]] = c("xgbLinear", "xgbTree", "xgbDART")
handlerTrain <- readRDS("~/MetaLearning/Pruebas/PruebaGorda/allModels-xgbLinear.rds")
handlerMLdata <- readRDS("~/MetaLearning/Pruebas/PruebaGorda/mldatahandler.rds")
handlerMLdata$test1mldata = "~/MetaLearning/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8test.1-p-MyPhenotype1test-c-COVS_test1-a-NA.dataForML"
handlerMLdata$train1mldata = "~/MetaLearning/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8train.1-p-MyPhenotype1train-c-COVS_train1-a-NA.dataForML"
library(caretEnsemble)
models  <- list(handlerTrain[[1]]$bestModel,handlerTrain[[2]]$bestModel,handlerTrain[[3]]$bestModel,handlerTrain[[4]]$bestModel,handlerTrain[[5]]$bestModel)
class(models) <- "caretList"
stack.rf <- caretStack(models, method = "rf", metric = "Accuracy")
stackControl <- trainControl(
method = "repeatedcv",
number = 10,
repeats = 3,
savePredictions=TRUE,
classProbs = TRUE)
set.seed(1234)
stack.rf <- caretStack(models, method = "rf", metric = "Accuracy", trControl = stackControl)
handlerMLdata <- readRDS("~/MetaLearning/Pruebas/PruebaGorda/mldatahandler.rds")
testmldata = fread("~/MetaLearning/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8test.1-p-MyPhenotype1test-c-COVS_test1-a-NA.dataForML")
train = fread("~/MetaLearning/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8train.1-p-MyPhenotype1train-c-COVS_train1-a-NA.dataForML")
handler = NULL
library(caret)
library(plotROC)
library(magrittr)
library(data.table)
handlerMLdata <- readRDS("~/MetaLearning/Pruebas/PruebaGorda/mldatahandler.rds")
testmldata = fread("~/MetaLearning/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8test.1-p-MyPhenotype1test-c-COVS_test1-a-NA.dataForML")
train = fread("~/MetaLearning/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8train.1-p-MyPhenotype1train-c-COVS_train1-a-NA.dataForML")
handler = NULL
includeGeno = F
gridSearch = 30
imputeMissingData = "median"
trainSpeed = "FAST"
workPath = "/home/rafa/MetaLearning/Pruebas/"
train$PHENO[train$PHENO == 2] <- "DISEASE"
train$PHENO[train$PHENO == 1] <- "CONTROL"
ID <- train$ID
train[,c("ID") := NULL]
preProcValues <- preProcess(train[,-1], method = c(paste(imputeMissingData,"Impute", sep = ""))) # note here we pick impute method (KNN or median),  we can also exclude near zero variance predictors and correlated predictors
train_processed <- predict(preProcValues, train) # here we make the preprocessed values
CVfolds <- 5
CVrepeats <- 3
indexPreds <- createMultiFolds(train$churn, CVfolds, CVrepeats)
ctrl <- trainControl(method = "repeatedcv",
repeats = CVrepeats,
number = CVfolds,
returnResamp = "all",
savePredictions = "all",
classProbs = TRUE,
summaryFunction = twoClassSummary,
index = indexPreds)
indexPreds <- createMultiFolds(train_processed$PHENO, CVfolds, CVrepeats)
ctrl <- trainControl(method = "repeatedcv",
repeats = CVrepeats,
number = CVfolds,
returnResamp = "all",
savePredictions = "all",
classProbs = TRUE,
summaryFunction = twoClassSummary,
index = indexPreds)
model <- train(PHENO ~ .,
data = train_processed,
method = "rf",
trControl = ctrl,
#tuneLength = gridSearch,
metric = "ROC")
library(caret)
library(plotROC)
library(magrittr)
library(data.table)
library(caretEnsemble)
model1 <- readRDS("~/models-glm.rds")
model2 <- readRDS("~/models-lda.rds")
models  <- list(glm = model1,lda = model2)
class(models) <- "caretList"
multiensemble <- caretEnsemble(models)
handlerMLdata <- readRDS("~/MetaLearning/Pruebas/PruebaGorda/mldatahandler.rds")
handlerMLdata$test1mldata = "~/MetaLearning/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8test.1-p-MyPhenotype1test-c-COVS_test1-a-NA.dataForML"
handlerMLdata$train1mldata = "~/MetaLearning/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8train.1-p-MyPhenotype1train-c-COVS_train1-a-NA.dataForML"
checkVariantNames(handlerMLdata$train1mldata,handlerMLdata$test1mldata)
source("~/io_dev.R")
checkVariantNames(handlerMLdata$train1mldata,handlerMLdata$test1mldata)
dataTest <- fread(handlerMLdata$test1mldata)
dataTest$PHENO[dataTest$PHENO == 2] <- "DISEASE"
dataTest$PHENO[dataTest$PHENO == 1] <- "CONTROL"
ID <- dataTest$ID
dataTest[,c("ID") := NULL]
preProcValues <- preProcess(dataTest[,-1], method = c(paste(imputeMissingData,"Impute", sep = ""))) # note here we pick impute method (KNN or median),  we can also exclude near zero variance predictors and correlated predictors
test_processed <- predict(preProcValues, dataTest)
imputeMissingData = "median"
preProcValues <- preProcess(dataTest[,-1], method = c(paste(imputeMissingData,"Impute", sep = ""))) # note here we pick impute method (KNN or median),  we can also exclude near zero variance predictors and correlated predictors
test_processed <- predict(preProcValues, dataTest) # here we make the preprocessed values
predictedValues <- predict(multiensemble, newdata = test_processed)
View(preProcValues)
confMat <- confusionMatrix(data = as.factor(predictedValues), reference = as.factor(test_processed$PHENO), positive = "DISEASE")
confMat
sumaGLM = 0
for (i in 1:5){
predictionsPeor <- predict(model1, test_processed)
confmatp = confusionMatrix(data = as.factor(predictionsPeor), reference = as.factor(test_processed$PHENO), positive = "DISEASE")
sumaGLM = sumaGLM + confmatp$overall['Accuracy']
}
mediaGLM = sumaGLM / 5
sumaGLM = 0
for (i in 1:5){
predictionsPeor <- predict(model2, test_processed)
confmatp = confusionMatrix(data = as.factor(predictionsPeor), reference = as.factor(test_processed$PHENO), positive = "DISEASE")
sumaGLM = sumaGLM + confmatp$overall['Accuracy']
}
mediaGLM = sumaGLM / 5
help(cbind)
m <- cbind(1, 1:7)
m
m <- cbind(m, 8:14)
m
library(caret)
library(plotROC)
library(magrittr)
library(data.table)
source("~/io_dev.R")
source("~/funcionMML.R")
models = NULL
models[["ALL"]] = c("dnn","lda","glm", "nnet","C5.0","glmnet","nb", "xgbLinear", "earth", "svmRadial", "lasso",
"ridge", "evtree", "xgbTree", "rf", "bayesglm", "xgbDART")
models[["FAST"]] =  c("xgbTree", "rf")
models[["FURIOUS"]] = c("glm", "glmnet", "xgbLinear", "earth", "svmRadial", "lasso")
models[["BOOSTED"]] = c("xgbLinear", "xgbTree", "xgbDART")
handlerTrain <- readRDS("~/MetaLearning/Pruebas/PruebaGorda/allModels-xgbLinear.rds")
handlerMLdata <- readRDS("~/MetaLearning/Pruebas/PruebaGorda/mldatahandler.rds")
handlerMLdata$test1mldata = "~/MetaLearning/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8test.1-p-MyPhenotype1test-c-COVS_test1-a-NA.dataForML"
handlerMLdata$train1mldata = "~/MetaLearning/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8train.1-p-MyPhenotype1train-c-COVS_train1-a-NA.dataForML"
includeGeno = F
gridSearch = 30
imputeMissingData = "median"
trainSpeed = "FAST"
workPath = "/home/rafa/MetaLearning/Pruebas/"
handlerMeta <- NULL
prefix = paste0(handlerTrain[[1]]$bestAlgorithm,"-genotype-", includeGeno)
checkVariantNames(handlerMLdata$train1mldata,handlerMLdata$test1mldata)
dataTest <- fread(handlerMLdata$test1mldata)
#same preprocess applied to the training
dataTest$PHENO[dataTest$PHENO == 2] <- "DISEASE"
dataTest$PHENO[dataTest$PHENO == 1] <- "CONTROL"
ID <- dataTest$ID
dataTest[,c("ID") := NULL]
preProcValues <- preProcess(dataTest[,-1], method = c(paste(imputeMissingData,"Impute", sep = ""))) # note here we pick impute method (KNN or median),  we can also exclude near zero variance predictors and correlated predictors
test_processed <- predict(preProcValues, dataTest) # here we make the preprocessed values
#dataframe which will contain the predictions from each model
metaSet = data.frame(ID, test_processed$PHENO)
colnames(metaSet) <- c("ID", "PHENO")
for (i in 1:length(handlerTrain)){
preds <- predict(handlerTrain[[i]]$bestModel, newdata = test_processed)
colName <- paste0("Pred",i)
metaSet[colName] <- preds
}
View(metaSet)
metaSet2= metaSet
#if(includeGeno){
genoIdx <- tail(which(startsWith(colnames(test_processed),"PC")), n=1) +1
metaSet2 <- cbind(metaSet2, test_processed[1:3])
test_processed[1:3]
metaSet3 = metaSet
metaSet3 = cbind(metaSet3, test_processed[,1:3])
View(metaSet3)
metaSet4 = metaSet
metaSet3 = cbind(metaSet3, test_processed[,genoIdx:legnth(test_processed)])
metaSet3 = cbind(metaSet3, test_processed[,genoIdx:length(test_processed)])
metaSet4 = cbind(metaSet4, test_processed[,genoIdx:length(test_processed)])
genoIdx <- tail(which(startsWith(colnames(test_processed),"PC")), n=1) +1
colnames <- colnames(test_processed)[genoIdx:length(test_processed)]
for (i in colnames){
metaSet[i] <- test_processed[,..i]
}
setdiff(metaSet,metaSet4)
metaSet[1][1]
metaSet4[1][1]
metaSet$`22:50794282_A`
metaSet4$`22:50794282_A`
a <- readRDS("/home/rafa/MetaLearning/Pruebas/PruebaGorda/mldatahandler.rds")
View(a)
model1 = readRDS("~/models-glm.rds")
source('~/meta-launch.R', echo=TRUE)
algs = NULL
algs[["ALL"]] = c("dnn","lda","glm", "nnet","C5.0","glmnet","nb", "xgbLinear", "earth", "svmRadial", "lasso",
"ridge", "evtree", "xgbTree", "rf", "bayesglm", "xgbDART")
algs[["FAST"]] =  c("glm", "nb", "nnet", "rf", "dnn", "glmnet", "xgbTree", "xgbDART")
algs[["FURIOUS"]] = c("glm", "nb", "nnet", "rf", "dnn", "glmnet")
algs[["BOOSTED"]] = c("xgbLinear", "xgbTree", "xgbDART")
handlerMeta = NULL
handlerMeta <- metaMLtrainAndTest(models, handlerMLdata, algs, trainSpeed,imputeMissingData, workPath, includeGeno, gridSearch)
saveRDS(handlerMeta,paste0(workPath, "/handlerMeta-genotype-",bool,".rds"))
rm(list = ls())
source('~/meta-launch.R', echo=TRUE)
models[[1]]
rm(list = ls())
source('~/meta-launch.R', echo=TRUE)
install.packages("glmnet")
library("glmnet", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
source('~/meta-launch.R', echo=TRUE)
install.packages("klaR")
rm(list = ls())
source('~/meta-launch.R', echo=TRUE)
rm(list = ls())
install.packages("kernlab")
source('~/meta-launch.R', echo=TRUE)
saveRDS(handlerMeta,paste0(workPath, "/handlerMeta.rds"))
View(handlerMeta)
View(handlerMeta[["metaSet"]])
handlerMeta$confMat
devtools::create("MetaLearning")
install.packages("devtools")
devtools::create("MetaLearning")
install.packages("httr")
install.packages("curl")
install.packages("devtools")
devtools::create("MetaLearning")
devtools::create("MetaLearning")
roxygen2::roxygenise()
install.packages("roxygen2")
roxygen2::roxygenise()
roxygen2::roxygenise()
setwd("~/MetaLearning")
roxygen2::roxygenise()
setwd("~/Meta-ML")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
help(cbind)
roxygen2::roxygenise()
