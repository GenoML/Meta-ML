int(8/3)
round(8/3)
floor(8/3)
lines <- system(paste0("wc -l FALTA.txt", intern = TRUE)
lines <- system(paste0("wc -l FALTA.txt"), intern = TRUE)
lines <- system("wc -l FALTA.txt", intern = TRUE)
firstLine = system(paste0("head -n1 FALTA.txt", intern=TRUE))
firstLine = system(paste0("head -n1 FALTA.txt"), intern=TRUE)
system(paste0("sed -i '1s/^/",firstLine,"\n/' prueba.txt"),intern = TRUE)
system(paste0("sed -i '1itask goes here' prueba.txt"),intern = TRUE)
system(paste0("sed -i '1i",firstLine,"' prueba.txt"),intern = TRUE)
strtoi("3")
int("3")
path2Covs = "/home/rafa/MetaStuff/Pruebas/UNRELATED.SPAIN/COVS_SPAIN.cov"
path2Covs = "/home/rafa/MetaStuff/Pruebas/UNRELATED.SPAIN/COVS_SPAIN"
lines <- system(paste0("wc -l ", path2Covs, ".cov"), intern = TRUE)
lines <- system(paste0("wc -l ", path2Covs, ".cov | awk '{print $1}'"), intern = TRUE)
lines = strtoi(lines)
linesFile = floor(lines/3)
library(caret)
library(plotROC)
library(magrittr)
library(data.table)
source("~/io_dev.R")
models = NULL
models[["ALL"]] = c("dnn","lda","glm", "nnet","C5.0","glmnet","nb", "xgbLinear", "earth", "svmRadial", "lasso",
"ridge", "evtree", "xgbTree", "rf", "bayesglm", "xgbDART")
models[["FAST"]] =  c("xgbTree", "rf")
models[["FURIOUS"]] = c("glm", "glmnet", "xgbLinear", "earth", "svmRadial", "lasso")
models[["BOOSTED"]] = c("xgbLinear", "xgbTree", "xgbDART")
handlerTrain <- readRDS("~/MetaLearning/Pruebas/PruebaGorda/allModels-xgbLinear.rds")
handlerMLdata <- readRDS("~/MetaLearning/Pruebas/PruebaGorda/mldatahandler.rds")
handlerMLdata$test1mldata = "~/MetaLearning/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8test.1-p-MyPhenotype1test-c-COVS_test1-a-NA.dataForML"
handlerMLdata$train1mldata = "~/MetaLearning/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8train.1-p-MyPhenotype1train-c-COVS_train1-a-NA.dataForML"
models = NULL
models[["ALL"]] = c("dnn","lda","glm", "nnet","C5.0","glmnet","nb", "xgbLinear", "earth", "svmRadial", "lasso",
"ridge", "evtree", "xgbTree", "rf", "bayesglm", "xgbDART")
models[["FAST"]] =  c("xgbTree", "rf")
models[["FURIOUS"]] = c("glm", "glmnet", "xgbLinear", "earth", "svmRadial", "lasso")
models[["BOOSTED"]] = c("xgbLinear", "xgbTree", "xgbDART")
handlerTrain <- readRDS("~/MetaStuff/Pruebas/PruebaGorda/allModels-xgbLinear.rds")
handlerMLdata <- readRDS("~/MetaStuff/Pruebas/PruebaGorda/mldatahandler.rds")
handlerMLdata$test1mldata = "~/MetaStuff/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8test.1-p-MyPhenotype1test-c-COVS_test1-a-NA.dataForML"
handlerMLdata$train1mldata = "~/MetaStuff/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8train.1-p-MyPhenotype1train-c-COVS_train1-a-NA.dataForML"
includeGeno = F
gridSearch = 30
imputeMissingData = "median"
trainSpeed = "FAST"
workPath = "/home/rafa/MetaLearning/Pruebas/"
checkVariantNames(handlerMLdata$train1mldata,handlerMLdata$test1mldata)
dataTest <- fread(handlerMLdata$test1mldata)
summary(dataTest)
head(summary(dataTest))
head(dataTest)
library(caret)
library(plotROC)
library(magrittr)
library(data.table)
source("~/io_dev.R")
models = NULL
models[["ALL"]] = c("dnn","lda","glm", "nnet","C5.0","glmnet","nb", "xgbLinear", "earth", "svmRadial", "lasso",
"ridge", "evtree", "xgbTree", "rf", "bayesglm", "xgbDART")
models[["FAST"]] =  c("xgbTree", "rf")
models[["FURIOUS"]] = c("glm", "glmnet", "xgbLinear", "earth", "svmRadial", "lasso")
models[["BOOSTED"]] = c("xgbLinear", "xgbTree", "xgbDART")
handlerTrain <- readRDS("~/MetaStuff/Pruebas/PruebaGorda/allModels-xgbLinear.rds")
handlerMLdata <- readRDS("~/MetaStuff/Pruebas/PruebaGorda/mldatahandler.rds")
handlerMLdata$test1mldata = "~/MetaStuff/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8test.1-p-MyPhenotype1test-c-COVS_test1-a-NA.dataForML"
handlerMLdata$train1mldata = "~/MetaStuff/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8train.1-p-MyPhenotype1train-c-COVS_train1-a-NA.dataForML"
includeGeno = F
gridSearch = 30
imputeMissingData = "median"
trainSpeed = "FAST"
workPath = "/home/rafa/MetaStuff/Pruebas/"
checkVariantNames(handlerMLdata$train1mldata,handlerMLdata$test1mldata)
dataTest <- fread(handlerMLdata$test1mldata)
colnames(dataTest)
summary(dataTest)
str(dataTest)
dataTrain <- fread(handlerMLdata$train1mldata)
str(dataTrain)
#same preprocess applied to the training
dataTest$PHENO[dataTest$PHENO == 2] <- "DISEASE"
dataTest$PHENO[dataTest$PHENO == 1] <- "CONTROL"
ID <- dataTest$ID
dataTest[,c("ID") := NULL]
preProcValues <- preProcess(dataTest[,-1], method = c(paste(imputeMissingData,"Impute", sep = ""))) # note here we pick impute method (KNN or median),  we can also exclude near zero variance predictors and correlated predictors
test_processed <- predict(preProcValues, dataTest) # here we make the preprocessed values
test2 = test_processed[1:145]
test2 = test_processed[,1:145]
dfr1 <- data.frame(x = 1:5, y = runif(5), z = rnorm(5))
dfr2 <- data.frame(w = letter[1:5], x = 6:10, y = runif(5))
dfr2 <- data.frame(w = 2:6, x = 6:10, y = runif(5))
View(dfr1)
View(dfr2)
common_cols <- intersect(colnames(dfr1), colnames(dfr2))
rbind(
dfr1[, common_cols],
dfr2[, common_cols]
)
new_df = rbind(
dfr1[, common_cols],
dfr2[, common_cols]
)
View(new_df)
genoIdx <- tail(which(startsWith(colnames(test_processed),"PC")), n=1) +1
common <- intersect(colnames(test_processed[,genoIdx:length(test_processed)]), test2[,genoIdx:length(test2)])
common <- intersect(colnames(test_processed[,genoIdx:length(test_processed)]), colnames(test2[,genoIdx:length(test2)]))
meta = data.frame()
colnames(meta) <- c("ID", "PHENO")
df <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(df) <- c("ID", "PHENO", "hola")
View(df)
df["hey"] = seq(1,2,3)
df["hey"] = 1:3
df[,"hey"] = 1:3
df["ID"] = 1:3
df[1] = 1:3
df[1] = 1
View(df)
df <- data.frame(matrix(ncol = 3, nrow = 3))
colnames(df) <- c("ID", "PHENO", "hola")
df["ID"] = 1:3
View(df)
for (i in 1:3){
if (i==1) {
meta = 3
}
else{
meta = 2
}
print(meta)
}
for (i in 1:3){
if (i==1) {
meta = 3
}
else{
meta = 2
}
meta+=1
print(meta)
}
for (i in 1:3){
if (i==1) {
meta = 3
}
else{
meta = 2
}
meta= meta+1
print(meta)
}
test3 = test_processed[,115:200]
test1 = test_processed
tests = list(test1,test2,test3)
View(tests)
common_cols = colnames(tests[[1]])
for (i in 2:3){
common_cols <- intersect(common_cols, colnames(tests[[i]]))
}
help(Reduce)
Reduce(intersect, lapply(tests, colnames))
common <- Reduce(intersect, lapply(tests, colnames))
library(dplyr)
help("bind_rows")
one <- mtcars[1:4, ]
two <- mtcars[11:14, ]
# You can supply data frames as arguments:
bind_rows(one, two)
# You can supply data frames as arguments:
bind_rows(list)
lista = list(one,two)
# You can supply data frames as arguments:
bind_rows(list)
# You can supply data frames as arguments:
bind_rows(list, .id = "column_label")
listOfDataFrames <- vector(mode = "list", length = 100)
for (i in 1:100) {
listOfDataFrames[[i]] <- data.frame(a=sample(letters, 500, rep=T),
b=rnorm(500), c=rnorm(500))
}
bind_rows(listOfDataFrames, .id = "column_label")
listOfDataFrames[[1]] = one
listOfDataFrames[[2]] = two
listOfDataFrames <- vector(mode = "list", length = 100)
listOfDataFrames[[1]] = one
listOfDataFrames[[2]] = two
bind_rows(listOfDataFrames, .id = "column_label")
bind_rows(one, two)
bind_rows(listOfDataFrames)
listOfDataFrames <- vector(mode = "list")
listOfDataFrames[[1]] = one
listOfDataFrames[[2]] = two
bind_rows(listOfDataFrames)
common_cols
common_cols = common_cols[24:31]
common_cols
length(common)
head(dataTest)
head(test_processed)
one <- mtcars[1:4, ]
two <- mtcars[11:14, ]
listOfDataFrames <- vector(mode = "list")
listOfDataFrames[[1]] = one
listOfDataFrames[[2]] = two
bind_rows(listOfDataFrames)
listOfDataFrames = bind_rows(listOfDataFrames)
one <- mtcars[1:4, ]
two <- mtcars[11:14, ]
listOfDataFrames <- vector(mode = "list")
listOfDataFrames[[1]] = one
listOfDataFrames[[2]] = two
dfbindeado = bind_rows(listOfDataFrames)
dfr1 <- data.frame(x = 1:5, y = runif(5), z = rnorm(5))
dfr2 <- data.frame(w = 2:6, x = 6:10, y = runif(5))
common_cols <- intersect(colnames(dfr1), colnames(dfr2))
list <- vector(mode = "list")
lista <- vector(mode = "list")
lista[[1]] = dfr1
lista[[2]] = dfr2
test = bind_rows(lista)
View(test)
test_cols = test[,common_cols]
View(test_cols)
View(new_df)
new_df = rbind(
dfr1[, common_cols],
dfr2[, common_cols]
)
View(new_df)
help(rnorm)
dfr1 <- data.frame(x = 1:5, y = runif(5), z = rnorm(5))
dfr2 <- data.frame(w = 2:6, x = 6:10, y = runif(5))
common_cols <- intersect(colnames(dfr1), colnames(dfr2))
lista <- vector(mode = "list")
lista[[1]] = dfr1
lista[[2]] = dfr2
test = bind_rows(lista)
test_cols = test[,common_cols]
new_df = rbind(
dfr1[, common_cols],
dfr2[, common_cols]
)
View(new_df)
View(test_cols)
help("cbind")
cbind(1:7, diag(3))
cbind(1:7, 1
)
help("print")
help("readRDS")
h <- readRDS("~/handlersML.rds")
View(h)
library(caret)
library(data.table)
source("~/io_dev.R")
models = NULL
models[["ALL"]] = c("dnn","lda","glm", "nnet","C5.0","glmnet","nb", "xgbLinear", "earth", "svmRadial", "lasso",
"ridge", "evtree", "xgbTree", "rf", "bayesglm", "xgbDART")
models[["FAST"]] =  c("xgbTree", "rf")
models[["FURIOUS"]] = c("glm", "glmnet", "xgbLinear", "earth", "svmRadial", "lasso")
models[["BOOSTED"]] = c("xgbLinear", "xgbTree", "xgbDART")
handlerTrain <- readRDS("~/MetaStuff/Pruebas/PruebaGorda/allModels-xgbLinear.rds")
handlerMLdata <- readRDS("~/MetaStuff/Pruebas/PruebaGorda/mldatahandler.rds")
handlerMLdata$test1mldata = "~/MetaStuff/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8test.1-p-MyPhenotype1test-c-COVS_test1-a-NA.dataForML"
handlerMLdata$train1mldata = "~/MetaStuff/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8train.1-p-MyPhenotype1train-c-COVS_train1-a-NA.dataForML"
includeGeno = F
gridSearch = 30
imputeMissingData = "median"
trainSpeed = "FAST"
workPath = "/home/rafa/MetaStuff/Pruebas/"
# dataTest <- NULL
# #we keep the test part of each .dataForML generated in the previous steps, as this
# #data has not been used for training, and we join everything into one single dataframe
# for (i in 1:length(handlerTrain)){
#   testModeli <- fread(handlerTrain[[i]]$testmldata)
#   dataTest <- rbind(dataTest, testModeli, fill = TRUE)
# }
checkVariantNames(handlerMLdata$train1mldata,handlerMLdata$test1mldata)
dataTest <- fread(handlerMLdata$test1mldata)
dataTrain <- fread(handlerMLdata$train1mldata)
#same preprocess applied to the training
dataTest$PHENO[dataTest$PHENO == 2] <- "DISEASE"
dataTest$PHENO[dataTest$PHENO == 1] <- "CONTROL"
ID <- dataTest$ID
dataTest[,c("ID") := NULL]
preProcValues <- preProcess(dataTest[,-1], method = c(paste(imputeMissingData,"Impute", sep = ""))) # note here we pick impute method (KNN or median),  we can also exclude near zero variance predictors and correlated predictors
test_processed <- predict(preProcValues, dataTest) # here we make the preprocessed values
dataTest[,-1]
help(":=")
rm(list = ls())
library(caret)
library(data.table)
source("~/io_dev.R")
models = NULL
models[["ALL"]] = c("dnn","lda","glm", "nnet","C5.0","glmnet","nb", "xgbLinear", "earth", "svmRadial", "lasso",
"ridge", "evtree", "xgbTree", "rf", "bayesglm", "xgbDART")
models[["FAST"]] =  c("xgbTree", "rf")
models[["FURIOUS"]] = c("glm", "glmnet", "xgbLinear", "earth", "svmRadial", "lasso")
models[["BOOSTED"]] = c("xgbLinear", "xgbTree", "xgbDART")
handlerTrain <- readRDS("~/MetaStuff/Pruebas/PruebaGorda/allModels-xgbLinear.rds")
handlerMLdata <- readRDS("~/MetaStuff/Pruebas/PruebaGorda/mldatahandler.rds")
handlerMLdata$test1mldata = "~/MetaStuff/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8test.1-p-MyPhenotype1test-c-COVS_test1-a-NA.dataForML"
handlerMLdata$train1mldata = "~/MetaStuff/Pruebas/PruebaGorda/g-UNRELATED.SPAIN4.HARDCALLS.Rsq0.8train.1-p-MyPhenotype1train-c-COVS_train1-a-NA.dataForML"
includeGeno = F
gridSearch = 30
imputeMissingData = "median"
trainSpeed = "FAST"
workPath = "/home/rafa/MetaStuff/Pruebas/"
# dataTest <- NULL
# #we keep the test part of each .dataForML generated in the previous steps, as this
# #data has not been used for training, and we join everything into one single dataframe
# for (i in 1:length(handlerTrain)){
#   testModeli <- fread(handlerTrain[[i]]$testmldata)
#   dataTest <- rbind(dataTest, testModeli, fill = TRUE)
# }
checkVariantNames(handlerMLdata$train1mldata,handlerMLdata$test1mldata)
dataTest <- fread(handlerMLdata$test1mldata)
dataTrain <- fread(handlerMLdata$train1mldata)
#same preprocess applied to the training
dataTest$PHENO[dataTest$PHENO == 2] <- "DISEASE"
dataTest$PHENO[dataTest$PHENO == 1] <- "CONTROL"
ID <- dataTest$ID
dataTest$ID = NULL
preProcValues <- preProcess(dataTest[,-1], method = c(paste(imputeMissingData,"Impute", sep = ""))) # note here we pick impute method (KNN or median),  we can also exclude near zero variance predictors and correlated predictors
test_processed <- predict(preProcValues, dataTest) # here we make the preprocessed values
colnames(dataTest[,-1])
rm(list =ls())
h <- readRDS("~/handlersML.rds")
dim(h[[paste0("Repo",1)]])
colnames(h[[paste0("Repo",1)]])
h[[paste0("Repo",1)]]
View(h)
View(h)
models <- readRDS("/home/rafa/repoModelsPrueba.rds")
View(models)
sink(file = paste("methodPerformance.tab",sep =""), type = c("output"))
methodComparisons <- resamples(modelsRan)
summary(methodComparisons)
sink()
sink(file = paste("methodTimings.tab",sep =""), type = c("output"))
methodComparisons$timings
sink()
sink(file = paste("methodPerformance.tab",sep =""), type = c("output"))
summary(models[[1]]$methodComparisons)
sink()
sink(file = paste("methodTimings.tab",sep =""), type = c("output"))
models[[1]]$methodComparisons$timings
sink()
sink(file = paste("methodPerformance.tab",sep =""), type = c("output"))
summary(models[[2]]$methodComparisons)
sink()
sink(file = paste("methodTimings.tab",sep =""), type = c("output"))
models[[2]]$methodComparisons$timings
sink()
View(models)
library(caret)
test <- fread("g-genoRepo1test.1-p-MyPhenotype1test-c-COVS_test1-a-NA.dataForML")
setdiff(colnames(models$Repo1$bestModel$trainingData), colnames(test))
View(models)
test2 <- fread("g-genoRepo2test.1-p-MyPhenotype1test-c-COVS_test1-a-NA.dataForML")
setdiff(colnames(models$Repo1$bestModel$trainingData), colnames(test2))
test3 <- fread("g-genoRepo3test.1-p-MyPhenotype1test-c-COVS_test1-a-NA.dataForML")
length(setdiff(colnames(models$Repo1$bestModel$trainingData), colnames(test2)))
length(setdiff(colnames(test2),colnames(models$Repo1$bestModel$trainingData))
)
models <- readRDS("/home/rafa/repoModelsPrueba.rds")
models[[1]]$bestModel$coefnames
test <- fread("g-genoRepo1test.1-p-MyPhenotype1test-c-COVS_test1-a-NA.dataForML")
library(caretç)
library(caret)
test <- fread("g-genoRepo1test.1-p-MyPhenotype1test-c-COVS_test1-a-NA.dataForML")
test <- fread("g-genoRepo1test.1-p-MyPhenotype1test-c-COVS_test1-a-NA.dataForML")
clear
help(fread)
library(data.table)
test <- fread("g-genoRepo1test.1-p-MyPhenotype1test-c-COVS_test1-a-NA.dataForML")
test2 <- fread("g-genoRepo2test.1-p-MyPhenotype1test-c-COVS_test1-a-NA.dataForML")
setdiff(colnames(test), models[[2]]$bestModel$coefnames)
View(models)
setdiff(colnames(models$Repo1$bestModel$trainingData), colnames(test2))
setdiff(colnames(models$Repo2$bestModel$trainingData), colnames(test))
setdiff(colnames(test),colnames(models$Repo2$bestModel$trainingData))
length(colnames(models[[2]]$bestModel$trainingData))
length(colnames(test))
length(colnames(models[[2]]$bestModel$coefnames))
length(models[[2]]$bestModel$coefnames)
colnames(models[[2]]$bestModel$trainingData)
setdiff(colnames(test), models[[2]]$bestModel$coefnames)
setdiff(colnames(test),colnames(models$Repo2$bestModel$trainingData))
union(setdiff(colnames(test),colnames(models$Repo2$bestModel$trainingData)), setdiff(colnames(models$Repo2$bestModel$trainingData)), colnames(test))
union(setdiff(colnames(test),colnames(models$Repo2$bestModel$trainingData)), setdiff(colnames(models$Repo2$bestModel$trainingData),colnames(test)))
setdiff(colnames(models[[2]]$bestModel$trainingData), models[[2]]$bestModel$coefnames)
models[["Repo1"]][["bestModel"]][["coefnames"]]
models[["Repo2"]][["bestModel"]][["coefnames"]]
colnames(models[[2]]$bestModel$trainingData)
setdiff(colnames(models[[2]]$bestModel$trainingData), models[[2]]$bestModel$coefnames)
setdiff((colnames(models[[2]]$bestModel$trainingData))[1:7], models[[2]]$bestModel$coefnames[1:7])
setdiff((colnames(models[[2]]$bestModel$trainingData))[1:20], models[[2]]$bestModel$coefnames[1:20])
setdiff((colnames(models[[2]]$bestModel$trainingData))[1:100], models[[2]]$bestModel$coefnames[1:100])
setdiff((colnames(models[[2]]$bestModel$trainingData))[1:90], models[[2]]$bestModel$coefnames[1:90])
setdiff((colnames(models[[2]]$bestModel$trainingData))[1:50], models[[2]]$bestModel$coefnames[1:50])
setdiff((colnames(models[[2]]$bestModel$trainingData))[1:30], models[[2]]$bestModel$coefnames[1:30])
setdiff((colnames(models[[2]]$bestModel$trainingData))[1:20], models[[2]]$bestModel$coefnames[1:20])
setdiff((colnames(models[[2]]$bestModel$trainingData))[1:25], models[[2]]$bestModel$coefnames[1:25])
models <- readRDS("/home/rafa/repoModelsPrueba.rds")
colnames(models[[1]]$bestModel$trainingData)
colnames(models[[3]]$bestModel$trainingData)
View(models)
models[["Repo1"]][["bestModel"]][["coefnames"]]
test[,2:8] = NULL
h <- readRDS("~/mldatahandler.rds")
View(h)
h[["snpsToPull"]]
cbind(1:9,0)
test$`1:7040885_T`
models[[1]]$bestModel$coefnames
colnames(models[[1]]$bestModel$trainingData)
lista = c("aaa","bb")
table = cbind(1:3,1)
table
a = integer(3)
b = integer(3)
c = list(a,b)
Map(cbind, c, table)
Reduce(cbind, c, table)
diff1 = c("perro", "platano", "mochila")
do.call(cbind,setNames(c(list(diff1),rep(list(0),3)),
c("",symbols)))
do.call(cbind,setNames(c(list(diff1),rep(list(0)))
)
)
do.call(cbind,setNames(c(list(diff1),rep(list(0),3)),
c("",list(0))))
do.call(cbind,setNames(c(rep(list(0),3)),
c(list(diff1))))
do.call(cbind,setNames(c(rep(list(0),3)),
c("",list(diff1))))
do.call(cbind,setNames(c(rep(list(0),3)),
c("",diff1)))
do.call(cbind,setNames(c(rep(list(0),3)),
diff1))
do.call(cbind,setNames(c(1:3, rep(list(0),3)),
diff1))
do.call(cbind,setNames(c(list(1:3), rep(list(0),3)),
diff1))
do.call(cbind,setNames(c(rep(list(0),3)),
diff1))
df <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(df) <- diff1
df
df <- data.frame(matrix(ncol = 3, nrow = 3))
colnames(df) <- diff1
df
d <- data.frame(matrix(0, ncol = 3, nrow = 3))
d
colnames(d) <- diff1
d
diff[-1]
diff[,-1]
diff[-1,]
d[,c("platano")]
d[,c("platano","mochila")]
array = c("platano","mochila")
array
d[,array]
help(bind_rows)
a <- readRDS("metaSet1.rds")
View(a)
b <- readRDS("metaSet2.rds")
c <- readRDS("metaSet3.rds")
View(b)
completo <- readRDS("metaSetCOMPLETO.rds")
completo <- readRDS("metaSetCOMPLETO.rds")
View(completo)
summary(completo)
View(completo)
str(completo)
completamen <- readRDS("metaSetCOMPLETAMEN.rds")
View(completamen)
completamen <- readRDS("metaSetCOMPLETAMEN.rds")
View(completamen)
h <- readRDS("metaSetCOMPLETAMEN.rds")
h2 <- readRDS("metaSetCOMPLETAMEN2.rds")
h3 <- readRDS("metaSetCOMPLETO.rds")
h3 <- readRDS("metasetnuevo.rds")
h4 <- readRDS("metaSetCOMPLETO.rds")
View(h3)
View(h4)
setdiff(h3,h4)
setdiff(h4,h3)
hnuevo <- readRDS("metaset1.rds")
hnuevo2 <- readRDS("metaset2.rds")
View(hnuevo)
View(hnuevo2)
setdiff(hnuevo,hnuevo2)
setdiff(hnuevo$Pred3,hnuevo2$Pred3)
View(hnuevo)
View(hnuevo2)
rm(list = ls())
setwd("~/Meta-ML/R")
devtools::document()
setwd("~/Meta-ML")
library(devtools)
devtools::document()
roxygen2::roxygenise()
setwd("~/Meta-ML/R")
roxygen2::roxygenise()
setwd("~/Meta-ML")
roxygen2::roxygenise()
devtools::document()
